{
  "name": "thunder",
  "version": "0.1.8",
  "description": "One of the fastest JavaScript template engine for Node.js and browsers.",
  "bin": {
    "thunder": "./bin/thunder"
  },
  "keywords": [
    "template",
    "view",
    "view paser",
    "paser",
    "html",
    "html parser",
    "view engin",
    "template engin",
    "template paser"
  ],
  "author": {
    "name": "dreamerslab",
    "email": "ben@dreamerslab.com"
  },
  "dependencies": {
    "cli-color": "0.2.2",
    "mkdirp": "0.3.5",
    "rmdir": "1.0.0",
    "watchr": "2.4.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dreamerslab/thunder.git"
  },
  "main": "index",
  "engines": [
    "node >= 0.8.0"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://en.wikipedia.org/wiki/MIT_License"
    }
  ],
  "readme": "# thunder\n\nA lightning fast JavaScript template engine.\n\n\n\n## Description\n\n**thunder** is one of the fastest JavaScript template engine for Node.js and browsers. Checkout the benchmarks for its performance. The usage is quite simple, `evaluation`, `interpolation`, and `interpolation with html escaping`. All variables and functions must start with `it` for performance sake. **thunder** works well with `Express`, check out the examples folder for the setup.\n\n\n\n## Syntax\n\n### Evaluation\n\nEvaluate JavaScript expression\n\n> `<? ?>`\n\n    <? if( it.user ){ ?>\n      <p>User exist</p>\n    <? } ?>\n\n### Interpolation\n\nSimple output ( no escape )\n\n> `<?= ?>`\n\n    // script = '<script>alert( 'this is harmful' );</script>';\n    <?= it.script ?>\n    // prints out <script>alert( 'this is harmful' );</script>\n\n### Interpolation with html escaping\n\nSimple output ( escape ) | `& < > \"` --> `&amp; &lt; &gt; &quot;`\n\n> `<?- ?>`\n\n    // script = '<script>alert( 'this is gonna be fine' );</script>';\n    <?- it.script ?>\n    // prints out &lt;script&gt;alert( 'this is gonna be fine' );&lt;script/&gt;\n\n\n\n## Installation\n\n### With node.js\n\n> via npm:\n\n    // in the project root\n    $ npm install thunder\n\n### On browsers\n\n> Install `thunder` in global to use the command line tools. You will need them to compile the HTML templates to JavaScript strings. By default `thunder` looks for all the `.html` files in the dir `templates` in the same dir where the command is called, compile them to JavaScript strings and save them to `views` dir. You can specify the `input` and `output` dir to wherever you want by passing the `-i` and `-o` arguments. Also the default compiled strings are `requirejs` modules. By passing `-r=false` it will use the file name as the template name and attach it to `window` object.\n\n    // make sure you have `node.js` installed\n    $ npm intall thunder -g\n\n    $ thunder\n\n    Usage: thunder [command] [argument(s)]\n\n    Commands:\n      -v, --version    Display thunder version\n      h,  help         Display usage information\n      b,  build [args] Precompile templates\n      w,  watch [args] Watch for changes\n\n    Arguments for `build` & `watch commands`\n      -i, --input=/new/input/dir   Default: ./templates\n      -o, --output=/new/output/dir Default: ./views\n      -r, --requirejs=false        Default: true\n\n> Copy `thunder.min.js` to your public JavaScript dir.\n\n\n\n## Usage\n\nFor advance usages please checkout the API block.\n\n### With node.js\n\n     var thunder = require( 'thunder' );\n     var input   = '<div>Hello, this is <?= it.name ?> :)</div>',\n     var locals  = { name : 'Bibi' };\n     var options = {\n       cached   : true,\n       compress : true\n     };\n\n     var output = thunder.render( input, locals, options );\n\n     console.log( output );\n     // <div>Hello, this is Bibi :)</div>\n\n\n\n### Express 2.x\n\n    app.configure( function(){\n      ...\n      app.set( 'view engine', 'html' );\n      app.register( '.html', require( 'thunder' ));\n      // optional\n      app.set( 'view options', {\n        compress : true\n      });\n      ...\n    });\n\n> To use express `partial`, `helper` and `dynamic helper` just call the method but start with `it`.\n\n    // partial\n    <?= it.partial( 'common/_nav' ) ?>\n\n    // helper\n    <a class=\"<?= it.selected( 'somewhere', it.nav_selected )?>\" href=\"/somewhere\">Somewhere</a>\n\n\n\n### On browsers\n\n- Normal useage\n\n<!---->\n\n    // Include necessary JS files\n    <script src=\"/js/lib/thunder.min.js\"></script>\n    <script src=\"/js/views/index.js\"></script>\n    <script>\n      var input   = index,\n      var locals  = { name : 'Bibi' };\n      var options = { cached : true };\n      var output  = thunder.render( input, locals, options );\n\n      console.log( output );\n      // <div>Hello, this is Bibi :)</div>\n    </script>\n\n- With `requirejs`\n\n\n<!---->\n\n    <script src=\"/js/lib/require.js\" data-main=\"/js/main.js\"></script>\n    <script>\n      requirejs.config({\n        baseUrl : '/js/lib',\n        paths   : { views : '../views' }\n      });\n    </script>\n    <script>\n      define( function ( require, exports, module ){\n        var thunder = require( 'thunder' );\n        var input   = require( 'views/index' );\n        var locals  = { name : 'Bibi' };\n        var options = { cached : true };\n        var output  = thunder.render( input, locals, options );\n\n        console.log( output );\n        // <div>Hello, this is Bibi :)</div>\n      });\n    </script>\n\n\n\n## API\n\n#### Arguments\n\n> input\n\n    type: String\n    desc: Input string to be compiled\n\n### thunder.compiled_text( input, options );\n\nReturns the text ready to be compiled for the `compile` function.\n\n#### Arguments\n\n> input\n\n    type: String\n    desc: Input string to be compiled\n\n> options:\n\n    type: Object\n    props:\n      compress:\n        type: Boolean\n        default: false\n        desc: Whether to compress the output HTML\n\n#### Example code\n\n    var input         = '<div>Hello, this is <?= it.name ?> :)</div>';\n    var compiled_text = thunder.compiled_text( input );\n\n    console.log( compiled_text );\n    // var __t__='<div>Hello, this is ';__t__+= it.name ;__t__+=' :)</div>';return __t__;\n\n### thunder.compile( input, options );\n\nReturns the compiled function.\n\n#### Arguments\n\n> input\n\n    type: String\n    desc: Input string to be compiled\n\n> options\n\n    type: Object\n    props:\n      compress:\n        type: Boolean\n        default: false\n        desc: Whether to compress the output HTML\n\n#### Example code\n\n    var input  = '<div>Hello, this is <?= it.name ?> :)</div>';\n    var render = thunder.compile( input );\n\n    // it actually turns to the following function\n    // function ( locals ){\n    //   var __t__='<div>Hello, this is ';__t__+= locals.name ;__t__+=' :)</div>';return __t__;\n    // };\n\n### thunder.cached( input, options );\n\nReturns the cached compiled function.\n\n#### Arguments\n\n> input\n\n    type: String\n    desc: Input string to be compiled\n\n> options\n\n    type: Object\n    props:\n      compress:\n        type: Boolean\n        default: false\n        desc: Whether to compress the output HTML\n\n#### Example code\n\n    var input  = '<div>Hello, this is <?= it.name ?> :)</div>';\n    var render = thunder.cached( input );\n\n    // it actually turns to the following function and will be cached\n    // so that next time the text does not need to be compiled again\n    // function ( locals ){\n    //   var __t__='<div>Hello, this is ';__t__+= locals.name ;__t__+=' :)</div>';return __t__;\n    // };\n\n### thunder.render( input, locals, options );\n\nReturns the output.\n\n#### Arguments\n\n> input\n\n    type: String\n    desc: Input string to be compiled\n\n> locals\n\n    type: Object\n    desc: Variables to be passed to the compiled function\n\n> options\n\n    type: Object\n    props:\n      compress:\n        type: Boolean\n        default: false\n        desc: Whether to compress the output HTML\n      cached:\n        type: Boolean\n        default: false\n        desc: Whether to cache the compiled function\n\n#### Example code\n\n    var input  = '<div>Hello, this is <?= it.name ?> :)</div>',\n    var locals = { name : 'Bibi' };\n\n    var options = {\n      cached   : true,\n      compress : true\n    };\n\n    var output = thunder.render( input, locals, options );\n\n    console.log( output );\n    // <div>Hello, this is Bibi :)</div>\n\n\n\n## Examples\n\n> Checkout the `examples` folder for more details.\n\n### simple\n\n    $ cd /path/to/thunder/examples/simple\n    $ node run.js\n\n### complex\n\n    $ cd /path/to/thunder/examples/complex\n    $ node run.js\n\n### express\n\n    $ cd /path/to/thunder/examples/express\n    $ npm install -lf\n    $ node app.js\n\n\n\n## Benchmarks\n\nThe followings are some well-known template parsers that I took for Benchmarks. You are welcome to fork it and add more. There are 2 main parts, the compiling speed and the rendering speed. The compiled templates are cached in `jqtpl`, `Swig` and **thunder**. Therefore their benchmarks for compiling is much faster. You can change the compile method from `cached` to `compile` to see the none-cached speed for **thunder**.\n\n> To run the benchmarks just type the following commands in the terminal\n\n    $ git clone git://github.com/dreamerslab/thunder.git\n    $ cd thunder/benchmarks/\n    $ npm install -lf\n    $ node run.js\n\n- [doT](https://github.com/olado/doT)\n- [EJS](https://github.com/visionmedia/ejs)\n- [haml-js](https://github.com/creationix/haml-js)\n- [Haml.js](https://github.com/visionmedia/haml.js)\n- [Jade](https://github.com/visionmedia/jade)\n- [jqtpl](https://github.com/kof/node-jqtpl)\n- [jst](https://github.com/shaunlee/node-jst)\n- [nTenjin](https://github.com/QLeelulu/nTenjin)\n- [Swig](https://github.com/paularmstrong/swig)\n- [thunder](https://github.com/dreamerslab/thunder)\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 dreamerslab &lt;ben@dreamerslab.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/dreamerslab/thunder/issues"
  },
  "homepage": "https://github.com/dreamerslab/thunder",
  "_id": "thunder@0.1.8",
  "dist": {
    "shasum": "c6108e0783b43d5dd0ce3ebd77006be457aa644e"
  },
  "_from": "thunder@0.1.8",
  "_resolved": "https://registry.npmjs.org/thunder/-/thunder-0.1.8.tgz"
}
